#!/usr/bin/perl

use strict;
use warnings;
use JFR::Fastq;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

our $VERSION = 1.3;
our $BWA = 'bwa'; # will work as-is if bwa is in $PATH, can edit to full path

MAIN: {
    my $rh_o = process_options();
    make_index($rh_o->{'fasta'});
    bwa_aln($rh_o);
    make_sam_files($rh_o);
    if ($rh_o->{'unp'}) {
        my $rh_se_ids = get_ids("$rh_o->{'out'}.bwa.samse.sam");
        filter($rh_se_ids,$rh_o,'unp');
    }
    if ($rh_o->{'left'}) {
        my $rh_pe_ids = get_ids("$rh_o->{'out'}.bwa.sampe.sam");
        filter($rh_pe_ids,$rh_o,'left');
        filter($rh_pe_ids,$rh_o,'right');
    }
}

sub filter {
    my $rh_ids = shift;
    my $rh_o = shift;
    my $lrunp = shift;
    my %map = ('unp' => 'unp', 'left', => 'A', 'right' => 'B');
    my $in = $rh_o->{$lrunp};
    my $out = "$rh_o->{'out'}.filtered.$map{$lrunp}.fq";
    my $matched_out = "$rh_o->{'out'}.matched.$map{$lrunp}.fq";

    open OUT, ">$out" or die "cannot open >$out:$!";
    if ($rh_o->{'savereads'}) {
        open MTOUT, ">$matched_out" or die "cannot open >$matched_out:$!";
    }
    my $fp = JFR::Fastq->new($in);
    my $count = 0;
    my $total = 0;
    while (my $rec = $fp->get_record()) {
        $total++;
        my $id = $rec->{'def'};
        $id =~ s/^.//;
        $id =~ s/ .+$//;
        if ($rh_ids->{$id}) {
            $count++;
            if ($rh_o->{'savereads'}) {
                print MTOUT "$rec->{'def'}\n$rec->{'seq'}\n";
                print MTOUT "+\n$rec->{'qual'}\n";
            }
        } else {
            print OUT "$rec->{'def'}\n$rec->{'seq'}\n+\n$rec->{'qual'}\n";
        }
    }
    print "$total sequences were processed from $in\n";
    print "Filtered $count sequences from $in to $out\n";
    if ($rh_o->{'savereads'}) {
        print "Reads that matched $rh_o->{'fasta'} were written to ";
        print "$matched_out\n";
    }
    print "\n";
}

sub make_index {
    my $fasta = shift;
    system "$BWA index $fasta\n";
}

sub get_ids {
    my $file = shift;
    my %ids = ();
    open IN, $file or die "cannot open $file:$!";
    while (my $line = <IN>) {
        chomp $line;
        next if ($line =~ m/^\s*\[/);
        next if ($line =~ m/^\s*\@/);
        next if ($line =~ m/^\s*$/);
        my @fields = split /\t/, $line;
        next unless ($fields[2]); # avoid strange line in SAM file: "0.42 sec"
        next if ($fields[2] eq '*');
        $ids{$fields[0]}++;
    }
    return \%ids;
}

sub bwa_aln {
    my $rh_o = shift;
    system "$BWA aln -o 0 -t $rh_o->{'threads'} $rh_o->{'fasta'} $rh_o->{'left'} > $rh_o->{'out'}.bwa.A.sai";
    system "$BWA aln -o 0 -t $rh_o->{'threads'} $rh_o->{'fasta'} $rh_o->{'right'} > $rh_o->{'out'}.bwa.B.sai";
    if ($rh_o->{'unp'}) {
        system "$BWA aln -o 0 -t $rh_o->{'threads'} $rh_o->{'fasta'} $rh_o->{'unp'} > $rh_o->{'out'}.bwa.unp.sai";
    }
}


sub make_sam_files {
    my $rh_o = shift;
    system "$BWA sampe $rh_o->{'fasta'} $rh_o->{'out'}.bwa.A.sai $rh_o->{'out'}.bwa.B.sai $rh_o->{'left'} $rh_o->{'right'} -f $rh_o->{'out'}.bwa.sampe.sam";
    if ($rh_o->{'unp'}) {
        system "$BWA samse $rh_o->{'fasta'} $rh_o->{'out'}.bwa.unp.sai $rh_o->{'unp'} -f $rh_o->{'out'}.bwa.samse.sam"; 
    }
}

sub process_options {
    my $rh_opts = {};
    my $opt_results = Getopt::Long::GetOptions(
                              "version" => \$rh_opts->{'version'},
                            "threads=i" => \$rh_opts->{'threads'},
                                "out=s" => \$rh_opts->{'out'},
                             "fastas=s" => \$rh_opts->{'fasta'},
                               "left=s" => \$rh_opts->{'left'},
                              "right=s" => \$rh_opts->{'right'},
                                "unp=s" => \$rh_opts->{'unp'},
                            "savereads" => \$rh_opts->{'savereads'},
                                 "help" => \$rh_opts->{'help'});
    $rh_opts->{'threads'} = 1 unless ($rh_opts->{'threads'});
    if ($rh_opts->{'version'}) {
        print "FastqSifter $VERSION\n";
        exit;
    }
    pod2usage({-exitval => 0, -verbose => 2}) if $rh_opts->{'help'};

    my $usage_flag = 0;
    unless ($rh_opts->{'fasta'} && $rh_opts->{'out'}) {
        warn "missing --fasta\n"    unless ($rh_opts->{'fasta'});
        warn "missing --out\n"    unless ($rh_opts->{'out'});
        $usage_flag = 1;
    }
    unless (($rh_opts->{'left'} && $rh_opts->{'right'}) || $rh_opts->{'unp'}) {
        warn "included right but missing --left\n" if ($rh_opts->{'right'});
        warn "included left but missing --right\n" if ($rh_opts->{'left'});
        unless ($rh_opts->{'left'} || $rh_opts->{'right'}) {
            warn "either need --unp and/or (--right & --left)\n";
        }
        $usage_flag = 1;
        
    }
    usage() if ($usage_flag);

    check_if_files_exist($rh_opts);

    return $rh_opts;
}

sub check_if_files_exist {
    my $rh_opts = shift;

    unless (-e $rh_opts->{'fasta'}) {
        die "file $rh_opts->{'fasta'} does not exist";
    }
    if ($rh_opts->{'right'} && !(-e $rh_opts->{'right'})) {
        die "file $rh_opts->{'right'} does not exist";
    }
    if ($rh_opts->{'left'} && !(-e $rh_opts->{'left'})) {
        die "file $rh_opts->{'left'} does not exist";
    }
    if ($rh_opts->{'unp'} && !(-e $rh_opts->{'unp'})) {
        die "file $rh_opts->{'unp'} does not exist";
    }
}

sub usage {
    die "usage: $0 --out=PREFIX_FOR_OUTFILES --fasta=CONTAM_FASTA {--left=LEFT_FASTQ --right=RIGHT_FASTQ and/or --unp=UNPAIRED_FASTQ} [--threads=NUM_THREADS] [--savereads] [--version] [--help]\n";
}

__END__

=head1 NAME

B<FastqSifter> - Separate contaminating reads from FASTQ files 

=head1 AUTHOR

Joseph F. Ryan <joseph.ryan@whitney.ufl.edu>

=head1 SYNOPSIS

FastqSifter --out=PREFIX_FOR_OUTFILES --fasta=CONTAM_FASTA {--left=LEFT_FASTQ --right=RIGHT_FASTQ and/or --unp=UNPAIRED_FASTQ} [--threads=NUM_THREADS] [--savereads] [--version] [--help]

=head1 DESCRIPTION

This program will take a FASTA sequence (e.g., mitochondrial genome sequence, symbiont genome, genome of suspected contaminant) and align a set of reads (left and right, and/or unpaired) using bwa and then remove reads that align from the original set of reads.  It will optionally save the aligned (matched) reads as well.

requires: bwa, JFR::Fastq

=head1 BUGS

Please report them to <joseph.ryan@whitney.ufl.edu>

=head1 OPTIONS

=over 2

=item B<--out>

Prefix for outfiles. Filtered reads will have the word "filtered" in the name (e.g. blarg.filtered.A.fq if "blarg" was the prefix)

=item B<--FASTA>

FASTA sequence(s) that comprise reads you would like to separate or remove (e.g., MT genome of species, symbiont genome, genome of potential contaminant)

=item B<--left>

Left reads in FASTQ format (can be compressed with gz suffix or not)

=item B<--right>

Right reads in FASTQ format (can be compressed with gz suffix or not)

=item B<--unp>

Unpaired reads in FASTQ format (can be compressed with gz suffix or not)
optional

=item B<--savereads>

Optionally create a FASTQ file with all reads that match provided FASTA. These reads will have *matched* in the name (e.g., blarg.matched.A.fq)

=item B<--version>

Print the program version and exit

=item B<--help>

Print this manual

=back

=head1 COPYRIGHT

Copyright (C) 2015,2016,2017,2018,2019,2020 Joseph F. Ryan

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
